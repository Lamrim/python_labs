# 1.	Определить является ли число простым. Попросить пользователя ввести произвольное целочисленное число.
#  Вывести «Число простое», если число является простым и «Число не просто» в остальных случаях.
#  Если пользователь вводит не число, то сообщить ему об этом и попросить ввести число еще раз.
#  Ограничение на вводимое число: 0 < x < 100 000 000

# ввод и валидация числа

def get_number():
    x = None
    try:
        x = int(input())
        if not (0 < x < 100000000):
            print('Ограничение на вводимое число: 0 < x < 100 000 000')
            return get_number()
        return x
    except:
        print('Некорректный ввод, необходимо ввести целое число:')
        return get_number()


# проверка числа на простоту
def is_prime(n):
    dividors = sum([n % i == 0 for i in range(2, int(n**0.5)+1)])
    if n != 1 and dividors == 0:
        print('Число простое')
    else:
        print('Число не просто')

print('Введите произвольное целое число:')
number = get_number()
is_prime(number)


# 2.	Анастасия инвестировала $100 под простые 10%. Другими словами, ежегодно инвестиция 
# должна приносить 10% инвестированной суммы, т.е. $10 каждый год: прибыль = 0,10 x исходный баланс
# В то же время Екатерина инвестировала $100 под сложные 5%. 
# Это значит, что прибыль составит 5% от текущего баланса, включая предыдущую накопленную прибыль: 
# прибыль = 0 ,05 х текущий баланс. Екатерина зарабатывает 5% от $100 в первый год, что дает ей $105. 
# На следующий год она зарабатывает 5% от $105, что составляет $5.25, и т.д. 
# Напишите программу, которая вычислит, сколько лет понадобится для того, чтобы сумма баланса 
# Екатерины превысила сумму баланса Анастасии, с отображением значений обоих балансов за каждый год

def get_sum_with_simple_rate(start, rate, years):
    profit = start * rate/100 * years 
    deposit = start + profit
    return round(deposit, 2)

def get_sum_with_compound_rate(start, rate, years):
    deposit = start * (1 + rate/100)**years
    return round(deposit, 2)

Ann_deposit, Kate_deposit = 100, 100
Ann_rate, Kate_rate = 10, 5
years = 1

while True:
    Ann_sum = get_sum_with_simple_rate(Ann_deposit, Ann_rate, years)
    Kate_sum = get_sum_with_compound_rate(Kate_deposit, Kate_rate, years)
    print(f'{years}й год: Анастасия-{Ann_sum}, Екатерина-{Kate_sum}')
    if Kate_sum < Ann_sum:
        years += 1
    else:
        break
print()
print(f'Через {years} лет сумма баланса Екатерины превысит сумму баланса Анастасии')

# 3.	Напишите программу, которая многократно запрашивает у пользователя пару чисел до тех пор,
#  пока хотя бы одно из этой̆ пары не будет равно О. 
#  С каждой̆ парой̆ программа должна использовать функцию для вычисления среднего гармонического этих чисел. 
#  Среднее гармоническое чисел - это инверсия среднего значения их инверсий; она вычисляется следующим образом: 
#  среднее_гармоническое = 2• 0 х A x B / (A+B) 

def get_harmonic_mean(a, b):
    return 2*a*b / (a+b)

while True:
    print('Введите пару чисел через пробел:')
    try:
        a, b = [float(i) for i in input().split()]
        if a != 0 and b != 0:
            h = get_harmonic_mean(a, b)
            print(f'Среднее гармоническое = {h}')
        else:
            print('Введен 0, ариведерчи')
            break
    except:
        pass
    

 